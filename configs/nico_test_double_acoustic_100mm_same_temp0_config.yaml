# The configuration is structured using YAML (https://yaml.org/). Note that YAML uses spaces, not tabs, for identation.

# !!! Important !!! Do not edit this document. Instead, copy (at least) the first segment into your own config file.

#------------ This first segment of the config contains parameters mandatory for running a pipeline

# Paths to T1 and T2 relative to data_path; all string substitutions will be done using subject_id
t1_path_template: sub-%1$03d_T1.nii.gz 
t2_path_template: sub-%1$03d_T2.nii.gz

# select which medium setup to use: 'water' or 'layered'
simulation_medium: layered

# deeper focus:   [0, 359.593, 42.0712, 25.2634, 354.621, 11.165, 8.30994, 339.068, 16.873, 0.845129] # deeper
# narrower focus: [0, 272.2, 268.094, 286.791, 314.219, 0.0, 0.0, 360, 360, 73.7934] # narrower

# 100mm transducers
transducers:
  - name: right # any identifier will do, e.g. serial number, intended target, ...
    n_elements: 10 # number of elements in the transducer
    Elements_ID_mm: [10.0, 22.1, 29.8, 36.0, 41.4, 46.3, 50.7, 54.9, 58.7, 62.4] # minimum ID is not 0 because of the inactive center PCD # TODO maybe better to read out the (inflexible) hardware params from separate files
    Elements_OD_mm: [21.1, 28.8, 35.0, 40.4, 45.3, 49.7, 53.9, 57.8, 61.5, 65.0]
    curv_radius_mm: 100 # radius of curvature of the bowl 
    dist_to_plane_mm: 92.7 # distance to the transducer plane from the geometric focus
    source_amp: 200608 # [Pa] (72850 calibrated values at 30 W/cm^2 free-water Isppa, 84250 at 40 W/cm^2, 94100 for 50 W/cm^2)
    source_phase_deg: [0, 359.593, 42.0712, 25.2634, 354.621, 11.165, 8.30994, 339.068, 16.873, 0.845129] # deeper
    source_freq_hz: 300e3 # [Hz] the central frequency # TODO not quite clear what to do with the center PCD (500 kHz)?
    pos_t1_grid: [200, 144, 168] # Position on T1 grid [T1 grid space] (can be left out if importing location data) # TODO find way to read it out parametrically based on subject ID
    focus_pos_t1_grid: [91, 144, 144] # Stimulation target on T1 grid [T1 grid space] (again, can be left out if importing location data) # TODO find way to read it out parametrically based on subject ID (or consider one config per sbj); # TODO consider adding this to transducer (benefits: each transd can have a focus pos)
    
    # expected_focal_distance_mm: 90
  - name: left  # any identifier will do, e.g. serial number, intended target, ...
    n_elements: 10 # number of elements in the transducer
    Elements_ID_mm: [10.0, 22.1, 29.8, 36.0, 41.4, 46.3, 50.7, 54.9, 58.7, 62.4] # minimum ID is not 0 because of the inactive center PCD
    Elements_OD_mm: [21.1, 28.8, 35.0, 40.4, 45.3, 49.7, 53.9, 57.8, 61.5, 65.0]
    curv_radius_mm: 100 # radius of curvature of the bowl 
    dist_to_plane_mm: 92.7 # distance to the transducer plane from the geometric focus
    source_amp: 200608 # [Pa] (72850 calibrated values at 30 W/cm^2 free-water Isppa, 84250 at 40 W/cm^2, 94100 for 50 W/cm^2)
    source_phase_deg: [0, 272.2, 268.094, 286.791, 314.219, 0.0, 0.0, 360, 360, 73.7934] # narrower
    source_freq_hz: 300e3 # [Hz] the central frequency # TODO not quite clear what to do with the center PCD (500 kHz)?
    pos_t1_grid: [25, 144, 169] # Position on T1 grid [T1 grid space] (can be left out if importing location data) # TODO find way to read it out parametrically based on subject ID
    focus_pos_t1_grid: [135, 144, 145] # Stimulation target on T1 grid [T1 grid space] (again, can be left out if importing location data) # TODO find way to read it out parametrically based on subject ID (or consider one config per sbj); # TODO consider adding this to transducer (benefits: each transd can have a focus pos)
    # expected_focal_distance_mm: 90

# Important to note: the alpha values in 'alpha_0_true' are currently set for 500KHz transducers
# These should be adjusted to the values shown in their respected comments below the medium parameters
# We are still not entirely sure what alpha values best to use, so be critical of our and your own choices

#------------ This second segment contains parameters that can be used based on the specific needs of the analysis

# Should output be ordered based on subject id?
subject_subfolder: 1

# Optional affix for result files names
results_filename_affix: '_doubletransducer_' # TODO implement in matlab to automatically add an underscore

# This allows you to add additional paths and subpaths while running the pipeline
paths_to_add: []
subpaths_to_add: []

# By default, SimNIBS segmentation results are not overwritten, unless enabled here
overwrite_simnibs: 0

# Can allow to only run specific components of the pipeline
run_source_setup: 1 # Should we set up acoustic source? useful to switch off to look at initial segmentation results only
run_acoustic_sims: 1 # Should we run the acoustic simulations? useful to switch off to look at initial segmentation results only
run_heating_sims: 1 # Should we run the heating simulations? useful to switch off to look at initial segmentation results only
run_posthoc_water_sims: 0 # Should we run the simulations in free water with exactly the same parameter? useful for double checking that the true intensity matches the desired one

# In interactive mode (1), the figures are shown and confirmation dialogs appear (the latter of which will halt the pipeline until confirmation)
# In non-interactive mode (0), no plots are shown and no confirmation dialogs will 
interactive: 0
# Needs to be included if running in a non-interactive mode
overwrite_files: 'never' # 'never' to never overwrite, 'always' to always overwrite, any other value to ask for confirmation

# Should the script position_transducer_localite be used?
transducer_from_localite: 0
# Allows one to correct for varying distances between the infrared trackers attached to the transducer and the exit plane
reference_transducer_distance_mm: 15 # (can only be used with the function 'transducer_from_localite')

# Grid resolution (must be isotropic) 
grid_step_mm: 0.5  # [mm]

# These only need to be set manually if the simulations are done for water only
# Select the desired simulation grid size (number of points per dimension)
default_grid_size: 144
default_grid_dims: [144, 144, 256]

# Radius of the target area around the focus in which the ISPPA is averaged for the outputs
focus_area_radius: 5 # [mm]

# Default parameters for thermal simulations
thermal:
  duty_cycle: 0.1 # share of the stimulation duration during which the stimulation is on [0 to 1] (trial length = duty_cycle * stim_duration) # TODO just used to calculate on_off_step_duration?? i.e. mostly an epiphenomenon?
  iti: 0.2 # 0.6 # [s] interval between the trials, from the start of one trial to the start of another
  n_trials: 400 # number of trials to simulate; the total simulated duration is then n_trials*iti seconds
  stim_duration: 0.1 # 0.2 # [s] stimulation duration within a trial
  # Pulse repetition frequency is not used since the cooling effects between these cycles are limited

  # These should only be changed if they don't meet the criteria described in "run_heating_simulations"
  sim_time_steps: 0.005 # [s] simulation time steps during the stimulation period
  post_stim_time_step_dur: 0.02 # 0.1 # post-stimulation (inter-trial) steps
  on_off_step_duration: 0.02 # 0.200 # duration of the on+off cycle (e.g., with a duty cycle of 0.3 and 0.01 s time steps for simulation, the whole on+off cycle will take 0.1 s)
  equal_steps: 0 # is the duration of the simulation steps equal for on and off steps? if not, it is computed based on the sim_time_steps * n_steps where n_steps is the needed number of on and off steps derived from the duty cycle

  # Optional parameters:
  temp_0: #[deg C] initial temperature
    water: 37
    skull: 37
    brain: 37
    skin:  37
    skull_trabecular: 37
    skull_cortical:  37
  sensor_xy_halfsize: 100 # maximum size of the sensor window in which the temperature is recorded (in grid units)
  record_t_at_every_step: 0 # should we record temperature for every time step _for the whole sensor window_ (memory intensive, turn off if you experience 'out of memory' issues)

# select PML size, the default one for 3D is 10 (PML is the layer used in
# kWaves to absorb waves reaching the end of the computational grid,
# http://www.k-wave.org/documentation/example_na_controlling_the_pml.php)
pml_size: 10

# Expansion factor for the cerebro-spinal fluid brain mask;
# if the mask ends up being too big, try reducing it
# (40 is the conservative default; the mask is dilated with csf_mask_expansion_factor/voxel_size_mm cubic kernel)
csf_mask_expansion_factor: 40


# Use the kwaveArray class for simulations
use_kWaveArray: 0

# Thresholds for smoothing the skull and other masks
skull_smooth_threshold: 0.35 # (higher threshold means thinner mask, lower threshold means thicker mask)
other_smooth_threshold: 0.5 # (higher threshold means thinner mask, lower threshold means thicker mask)

# To what extent the computational grid can be expanded in order to get lower prime numbers to (potentially) speed up computations
prime_factor_max_grid_expansion: 40

# Select which k-Wave code to run (see 'run_simulations' for more documentation)
#   MATLAB CPU code 'matlab_cpu'
#   MATLAB GPU code 'matlab_gpu'
#   C++ code (Interactive) 'cpp_interactive'
#   C++ code (Non-Interactive) 'cpp_noninteractive'
#   CUDA code 'cuda' (currently does not work at the Donders HPC, but 'matlab_gpu' works)
code_type: matlab_gpu 

# Only use this if you are using the Donders HPC
# If not, you would have to do some things by hand (currently it only affects SimNIBS segmentation)
using_donders_hpc: 1

# Segmentation software (current options are 'headreco' and 'charm')
segmentation_software: charm

# An optional path to LD_LIBRARY used during SimNIBS installation
# If you experience an `undefined symbol` error in `create_mesh_surf.cpython-39-x86_64-linux-gnu.so`, set the next line to your LD_LIBRARY location
ld_library_path: /opt/gcc/7.2.0/lib64
