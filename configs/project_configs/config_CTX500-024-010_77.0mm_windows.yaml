#############################
# windows system (comment out if running on linux):
#############################

# Paths to the data location and SimNIBS environment (please use full paths)
data_path: /project/3015999.02/andche_sandbox/TUS_sims/tusim/data

# Path to SimNIBS binaries
simnibs_bin_path: C:/Users/nicade/SimNIBS-4.0/bin

# An optional path to LD_LIBRARY used during SimNIBS installation
# If you experience an `undefined symbol` error in `create_mesh_surf.cpython-39-x86_64-linux-gnu.so`, set the next line to your LD_LIBRARY location
ld_library_path: H:/sleep/nicade/lib64

# Segmentation software (current options are 'headreco' and 'charm')
segmentation_software: charm.cmd



subject_subfolder: 0 # Should each participants output be stored in a separate folder?

# t1_path_template: /*T1.nii.gz # comment out because want to keep the subject ID from default_config
# t2_path_template: /*T2.nii.gz

transducer: 
  n_elements: 4 # number of elements in the transducer
  #Elements_ID_mm: [0, 32.9184, 46.1264, 56.0324]
  #Elements_OD_mm: [32.3596, 45.5676, 55.5244, 64.008]
  Elements_ID_mm: [0, 31.6988, 44.2688, 53.6688]
  Elements_OD_mm: [31.14, 43.71, 53.11, 60.83]
  curv_radius_mm: 62.94 # radius of curvature of the bowl 
  dist_to_plane_mm: 52.38 # distance to the transducer plane from the geometric focus
  source_amp: 200608 # [Pa] (72850 calibrated values at 30 W/cm^2 free-water Isppa, 84250 at 40 W/cm^2, 94100 for 50 W/cm^2) # TODO really in Pa? when applying formula, off by factor of ~59.4
  source_phase_deg: [0.0, 245.6, 131.2, 16.7] # source phase [deg] (calibrated values at 20 W/cm^2 free-water Isppa)
  source_freq_hz: 500e3 # [Hz] the central frequency

# expected_focal_distance_mm: 77.0 # expected distance to the stimulation focus # if not specified, then re-calculated during runtime based on target and transducer position
transducer_from_localite: 0 # should we load the transducer locations from the localite file(s)
using_donders_hpc: 0 # are the simulations run on the HPC cluster?

run_posthoc_water_sims: 0
run_heating_sims: 0 # overwritten in multiple places in c_simulation?

medium:
  skull:
    alpha_0_true: 8

# phasic protocol

# thermal:
#   duty_cycle: 0.25 # share of the stimulation duration during which the stimulation is on
#   temp_0: 37 #[deg C] initial temperature, currently not used
#   stim_duration: 2 # [s] stimulation duration within a trial (TODO: difference between stim_duration and on_off_step_duration?)
#   iti: 8 # interval between the trials, from the start of one trial to the start of another [s] (TODO wouldn't "trial_duration" be more accurate?)
#   n_trials: 150 # number of trials to simulate; the total simulated duration is then n_trials*iti seconds  
#   sim_time_steps: 0.005 # [s] simulation time steps during the stimulation period
#   on_off_step_duration: 0.200 # duration of the on+off cycle (200 ms incl. stim on + off)
#   equal_steps: 0 # is the duration of the simulation steps equal for on and off steps? if not, it is computed based on the sim_time_steps * n_steps where n_steps is the needed number of on and off steps derived from the duty cycle

# continuous protocol

thermal:
  duty_cycle: 0.25 # share of the stimulation duration during which the stimulation is on
  temp_0: 37 #[deg C] initial temperature, currently not used
  stim_duration: 0.2 # [s] stimulation duration within a trial (TODO: difference between stim_duration and on_off_step_duration?)
  iti: 0.2 # interval between the trials, from the start of one trial to the start of another [s] (TODO wouldn't "trial_duration" be more accurate?)
  n_trials: 600 # number of trials to simulate; the total simulated duration is then n_trials*iti seconds  
  sim_time_steps: 0.005 # [s] simulation time steps during the stimulation period
  on_off_step_duration: 0.200 # duration of the on+off cycle (200 ms incl. stim on + off)
  equal_steps: 0 # is the duration of the simulation steps equal for on and off steps? if not, it is computed based on the sim_time_steps * n_steps where n_steps is the needed number of on and off steps derived from the duty cycle
 