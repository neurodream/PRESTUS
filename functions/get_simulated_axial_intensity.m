function [parameters] = get_simulated_axial_intensity(parameters)

% adds a parameter to the transducers
% TODO think whether to make it part of load_parameters

axial_position = (1:parameters.default_grid_dims(3))*(parameters.grid_step_mm);
axial_position = axial_position';

for t_i = 1:numel(parameters.transducers)

    transducer = parameters.transducers(t_i);

    dist_to_exit_plane = transducer.curv_radius_mm - transducer.dist_to_plane_mm;
    ax_pos = axial_position + dist_to_exit_plane;

    opt_limits = [ax_pos(2,1), ax_pos(end,1)];

    % TODO readout the intensity correctly
    p_axial_oneil = focusedAnnulusONeil( ...
        transducer.curv_radius_mm/1e3, ...
        [transducer.Elements_ID_mm; transducer.Elements_OD_mm]/1e3, ...
        transducer.source_amp/(parameters.medium.water.density*parameters.medium.water.sound_speed), ...
        transducer.source_phase_rad, ...
        transducer.source_freq_hz, ...
        parameters.medium.water.sound_speed, ...
        parameters.medium.water.density, ...
        (ax_pos-0.5)*1e-3 ...
        );

    i_axial_oneil = p_axial_oneil.^2/(2*parameters.medium.water.sound_speed*parameters.medium.water.density) .* 1e-4;

    % [~, ~, ~, h, i_axial_oneil] = phase_optimization_annulus_full_curve( ...
    %     deg2rad(transducer.source_phase_deg(1:end-1)), ...
    %     parameters, ...
    %     0.15,...
    %     ax_pos, ...
    %     ax_pos, ...
    %     1, ...
    %     opt_limits, ...
    %     ones(1, numel(ax_pos)) ...
    % );
    % 
    % close(h);

    parameters.transducers(t_i).axial_intensity_sim_FW = i_axial_oneil;
    parameters.transducers(t_i).axial_position = ax_pos;

end